university
my files
my files
aml.docx
culure.docx culure.docx
document details
submission id
trn:oid:::3618:101713218
submission date
jun 20, 2025, 12:58 am gmt+5:30
download date
jun 20, 2025, 12:58 am gmt+5:30
file name
aml.docx
file size
19.1 kb
4 pages
1,300 words
7,952 characters
page 1 of 7 - cover page
submission id trn:oid:::3618:101713218
page 1 of 7 - cover page
submission id trn:oid:::3618:101713218
4% overall similarity
the combined total of all matches, including overlapping sources, for each database.
filtered from the report
bibliography
quoted text
match groups
4
not cited or quoted 4%
matches with neither in-text citation nor quotation marks
0
missing quotations 0%
matches that are still very similar to source material
0
missing citation 0%
matches that have quotation marks, but no in-text citation
0
cited and quoted 0%
matches with in-text citation present, but no quotation marks
top sources
2%
internet sources
1%
publications
3%
submitted works (student papers)
integrity flags
0 integrity flags for review
no suspicious text manipulations found.
our system's algorithms look deeply at a document for any inconsistencies that 
would set it apart from a normal submission. if we notice something strange, we flag 
it for you to review.
a flag is not necessarily an indicator of a problem. however, we'd recommend you 
focus your attention there for further review.
page 2 of 7 - integrity overview
submission id trn:oid:::3618:101713218
page 2 of 7 - integrity overview
submission id trn:oid:::3618:101713218
match groups
4
not cited or quoted 4%
matches with neither in-text citation nor quotation marks
0
missing quotations 0%
matches that are still very similar to source material
0
missing citation 0%
matches that have quotation marks, but no in-text citation
0
cited and quoted 0%
matches with in-text citation present, but no quotation marks
top sources
2%
internet sources
1%
publications
3%
submitted works (student papers)
top sources
the sources with the highest number of matches within the submission. overlapping sources will not be displayed.
1
internet
github.com
2%
2
submitted works
gla university on 2024-10-10
<1%
3
submitted works
queen mary and westfield college on 2024-08-22
<1%
4
publication
r. n. v. jagan mohan, b. h. v. s. rama krishnam raju, v. chandra sekhar, t. v. k. p…
<1%
page 3 of 7 - integrity overview
submission id trn:oid:::3618:101713218
page 3 of 7 - integrity overview
submission id trn:oid:::3618:101713218
introduction: 
in the modern dynamically developing world of digital technologies, content generation and sharing are dynamically evolving, 
with more and more content being produced and disseminated faster than ever before. as more academic institutions expanded, 
together with online publishing, and content generators using ai, the issue about content originality and authenticity has become 
topical. lack of academic integrity, unintentional content reuse, and improper use of other people work has transformed 
plagiarism detection into a compliance strategy and a must-have, industry-wide. 
the spread of ai-written text does not help the situation. highly sophisticated language ai such as gpt-2, gpt-3 and gpt-4 are 
already able to generate seemingly humanistic texts that can hardly be distinguished when compared with those written by a 
human. this removes the effectiveness of conventional plagiarism checkers, and in particular, those that utilize simple keyword or 
phrase comparisons. 
the given project can solve these issues because it proposes an ai-driven, efficient plagiarism detection system. it combines 
recent machine learning technologies, including transformers, sentence embeddings and svm-based classification into indices of 
semantic similarity, ai-generated level content, and duplication on the corpus level. the system is a full-stack application, that 
consists of a responsive react frontend and a python flask backend and is completely self-contained to use on a local machine 
and keep private. 
related ideas and procedures: 
this project is constructed with the help of a few concepts used in natural language processing and applied machine learning: 
sentence embeddings: it is different in that instead of considering words, the whole sentence is coded into a dense 
representation that encodes semantics. the all-mpnet-base-v2 transformer model is provided to generate 768 dimensional 
embeddings to each input document. 
transformer models: transformers include bert and mpnet solutions that are deep learning models with broad adoption in nlp 
tasks. they use the attention mechanisms, as they are accustomed to take into account the context of each word in a sentence, 
which plays an essential role in comprehending the semantic similarity and meaning. 
cosine similarity: this is a similarity measurement based on a vector which measures the cosine of the combined angle of two 
vectors. we make use of it in our system as a measure of similarity between sentence embeddings. 
tf-idf and support vector machines (svm): to detect ai generated content, the system employs tf-idf to encode documents 
using word frequency and unicity so that they can be quantified and then cared by a support vector machines (svm) that is 
trained to discriminate between ai-written and human-written text. 
corpus embedding matching: unlike the case of just the document-to-document comparison, this method uses a permanent 
corpus of reference documents (the corpus), that an incoming document can be compared to in order to identify duplicate work 
or derivative documents. 
the combination of the above techniques makes a consistent and trustworthy approach to addressing the surface-level and deep 
content similarity. 
methodology and experimental setup: 
this system includes three main subsystems: document-to-document similarity detection, document-to-corpus similarity 
detection and ai authorship classification. these are the fashions in which they were constructed and tried: 
data collection: 
for ai detection, we created a dataset of 1,000 samples split evenly between human-written articles and ai-generated text using 
gpt-2. for similarity detection, a static local corpus of text files was created using a mixture of articles, essays, and 
documentation. these files represent the “known universe” against which new documents are evaluated. 
3
page 4 of 7 - integrity submission
submission id trn:oid:::3618:101713218
page 4 of 7 - integrity submission
submission id trn:oid:::3618:101713218
 
 
1 | p a g e  
 
data preprocessing: 
human and ai text samples were normalized using standard nlp preprocessing techniques—lowercasing, punctuation removal, 
tokenization, and transformation to tf-idf vectors. for embedding-based similarity, texts were cleaned and embedded directly 
using the sentencetransformer library. 
model training and architecture: 
the ai classifier was built using a linear svm trained on tf-idf vectors. hyperparameter tuning was performed using 
gridsearchcv, and the model was calibrated with scikit-learn’s calibratedclassifiercv to obtain probabilistic outputs. 
document similarity is calculated using cosine similarity between vectorized embeddings. the all-mpnet-base-v2 model generates 
fixed-length vectors for any document or sentence pair. 
corpus embeddings are stored in a pickle file and loaded during runtime. each time a new document is checked, it is compared to 
all documents in the corpus. if its similarity to any existing document is below a certain threshold, it is considered original and 
added to the corpus. 
evaluation criteria and results: 
ai detection evaluation: 
we evaluated the svm model on standard classification metrics: 
accuracy: 92% 
precision: 91% 
recall: 89% 
f1 score: 90% 
auc-roc score: 0.96 
these metrics show that the svm model performs reliably in distinguishing ai-generated text from human-authored documents. 
the high auc indicates excellent performance across various thresholds, which is important when different users might demand 
different levels of sensitivity. 
plagiarism detection evaluation: 
since there’s no labeled dataset for plagiarism at the sentence level, we tested the model with 20 hand-selected document pairs. 
the similarity scores were consistent with human judgments: 
near-identical documents scored between 0.90–1.00 
reworded but similar content scored between 0.65–0.85 
dissimilar documents scored below 0.50 
overall, the embedding-based comparison provided a more nuanced and context-aware analysis compared to lexical matching, 
making it suitable for real-world plagiarism detection. 
deployment and integration: 
backend: 
the backend is implemented in python using flask, which exposes rest api endpoints for all core functionality. these include: 
/check – for document-to-document comparison 
2
4
page 5 of 7 - integrity submission
submission id trn:oid:::3618:101713218
page 5 of 7 - integrity submission
submission id trn:oid:::3618:101713218
 
 
2 | p a g e  
 
/check-corpus – for checking against the existing corpus 
/detect-ai – for ai-generated content detection 
all models are serialized using joblib or pickle and loaded into memory at startup to minimize latency. 
frontend: 
the frontend is built in react and styled using tailwind css. it includes: 
file upload components for different checks 
a dynamic donut chart to visualize similarity or ai scores 
a clean and professional layout with navigation and loading states 
the frontend and backend communicate over rest. environment variables are used to set the base api url, ensuring easy 
deployment to different environments. 
user guide: 
to run the system locally: 
backend: 
cd backend 
python -m venv 
venv\scripts\activate (windows) 
pip install -r requirements.txt 
python app.py 
frontend: 
cd frontend 
npm install 
npm run dev 
supported file formats: 
.txt 
.pdf 
.docx 
functionalities: 
two-document comparison 
smart check against a growing corpus 
ai detection with confidence scores 
real-time donut chart visualization 
1
page 6 of 7 - integrity submission
submission id trn:oid:::3618:101713218
page 6 of 7 - integrity submission
submission id trn:oid:::3618:101713218
 
 
3 | p a g e  
 
challenges and limitations: 
challenges: 
extracting text from complex pdfs and docx files was inconsistent. 
embedding size mismatches due to model updates occasionally caused runtime errors. 
large documents slowed down processing without chunking or asynchronous handling. 
limitations: 
the svm model may not generalize well to newer, more nuanced ai models without retraining. 
corpus embeddings are not dynamically updated during batch uploads. 
the system is currently single-user and lacks authentication or concurrency control. 
future considerations: 
there are several areas where the system can be improved: 
implement document chunking to handle longer documents more effectively 
add a user authentication layer with session management 
introduce document versioning and duplicate tracking in the corpus 
export comparison results as pdf reports 
containerize using docker for consistent deployment 
replace the svm with a transformer-based classifier trained on larger, more recent ai-generated datasets 
conclusion: 
this project presents a practical and technically sound solution to a growing problem. by combining modern nlp models with 
classical machine learning techniques and delivering them through a full-stack web application, we’ve built a plagiarism detection 
system that is robust, extensible, and user-friendly. it stands as a strong foundation for institutions and individuals who require a 
trustworthy and offline tool for verifying content originality and authorship. 
members contribution: 
member name 
task contribution 
abdullah faisal 
led backend development using flask, built key api endpoints, and integrated bert embeddings 
and the svm model. also contributed significantly to the final report and presentation 
preparation. 
abdul ahad 
focused on model training and preprocessing. developed the svm classifier, implemented tf-idf 
pipeline, and assisted with writing the methodology and evaluation sections of the report. 
abdullah ather 
designed the frontend using react and tailwind css, built the upload forms and visual feedback 
components, and created the project presentation slides and ui documentation. 
 
page 7 of 7 - integrity submission
submission id trn:oid:::3618:101713218
page 7 of 7 - integrity submission
submission id trn:oid:::3618:101713218